---
title: Getting the text out with Anemone and Nokogiri
author: Michaelhughes
date: 30.10.2011
filter: [rst, ]
tags: [Ruby]
---

Hello World!

Goodbye World!


The above HTML generates a `very basic page <http://www.mhughes.info/downloads/post-104-example.html>`_. We can now use Nokogiri to parse text out of the page using CSS selectors. For instance we can select both paragraphs using the common CSS class 'make\_me\_bold' or just one paragraph with a more specific class like 'my\_crazy\_style'. Example as follows:

::


   require 'rubygems'

   require 'open-uri'

   require 'nokogiri'

   doc = Nokogiri::HTML(open("http://www.mhughes.info/downloads/post-104-example.html"))

   doc.css('p.my_crazy_style').each do |listItem|

           puts listItem.content.strip

   end

   doc.css('.make_me_bold').each do |directionItem|

           puts directionItem.content.strip

   end


Anemone integrates Nokogiri into its page object that is passed to the on\_every\_page and on\_pages\_like methods. We can call the doc instance method of the page object and if possible it will return a Nokogiri parsed html document. In effect the doc instance method is a equivalent to calling Nokogiri::HTML(). Finally we can combine Nokogiri and Anemone to extract information from a website like Allrecipes.com.

::


   #!/usr/bin/ruby


   require 'rubygems'

   require 'nokogiri'

   require 'anemone'


   Anemone.crawl('http://allrecipes.com') do |anemone|

           anemone.focus_crawl do |page|

                   links = page.links.delete_if do |link|

                           (link.to_s =~ /recipe/).nil?

                   end

           end

           anemone.on_every_page do |page|

                   food_doc = page.doc

                   if not food_doc.nil?

                           puts "doc"

                           food_doc.css('li.ingredient').each do |listItem|

                                   puts listItem.content.strip

                           end

                           food_doc.css('.directions li').each do |directionItem|

                                   puts directionItem.content.strip

                           end

                   end

           end

   end


Anemone has a few specific methods that enable focused spidering of a web page. A useful method is the focus\_crawl method where in the example above we use a regular expression to create a list of links we want Anemone to follow from the total list of all links on a page. To actually pull information out of a page we use the on\_every\_page method which yields the page variable to the follow code block on every page that Anemone loads. In the on\_every\_page code block we use the CSS selector features of Nokogiri to extract ingredient information ('li.ingredient' is the relevant CSS) from the page.
