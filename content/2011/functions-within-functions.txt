---
title: Functions within functions
author: Michaelhughes
date: 09.10.2011
filter: [rst, ]
tags: [Javascript]
---

The idea of storing private information within a object is such a central concept to OOP that it has its own name, `encapsulation <http://en.wikipedia.org/wiki/Encapsulation_%28object-oriented_programming%29>`_. One form of encapsulation is limiting the scope of function names, i.e. creating private or protected functions.

In a traditional OOP language like C++, Java, or C# we can limit the visibility of a functions name in a object with a keyword. Usually a keyword like 'private' indicates that a name is unavailable outside the scope of that object, e.g:

::


   public class name {

     //Visible outside the name class when instantiated

     public void visible() {

       not_visible();

       return;

     }

     //can only be locally addressed

     private void not_visible() {

       return;

     }

   }


Private and public are both keywords that change the visibility of a name. Suppose we were not working with class definitions though, suppose that instead we're working with a function that has a repetitive, non-reusable component. In the context of classes and objects the answer would be to create a private internal method. Another approach though, is to create a nested function.

Even in just the context of writing functions we still may want to create private members that are reusable within only the scope of the outer function. A `previous post <http://mhughes.info/?p=37>`_ went into using nested functions in Javascript to create objects, here we'll just talk about creating simple functions.

A simple script:

::


   var i = 5; 

   function hello() {

     print('hello'+i);

     i++;

     print('hello'+i);

     i++; 

     print('hello'+i);

   }

   hello();


A very simple function, with an obvious way to refactor it to make it better:

::


   function print_hello(j) {

     print('hello'+j);

   }

   function hello(x) {

     var j = 5;

     for(var i = 0; i < x; i++) {

       print_hello(j)

       j++;

     }

   }

   hello(3);


Normally we could stop here, but there is a problem, print\_hello and hello are now both defined globally. If print\_hello is only needed for the hello method then it should not be defined at a global level where other functions besides hello can address it. To make print\_hello only locally available we can use nested functions:

::


   function hello(x) {

     function print_hello(j) {

       print('hello'+j);

     }

     var j = 5;

     for(var i = 0; i < x; i++) {

       print_hello(j);

       j++;

     }

   }

   hello(3);


Now we have both refactored the original poorly written hello and also avoided added unnecessary names to the global name space by using nested functions. In conclusion it is worth mentioning that this technique is not unique to EMCAscript and is available in most scripting languages.
