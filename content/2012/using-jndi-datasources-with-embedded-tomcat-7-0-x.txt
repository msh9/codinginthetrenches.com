---
title: Using JNDI Datasources with Embedded Tomcat 7.0.x
date: 28.10.2012
author: Michael Hughes
tags: [java, Web Services, Tomcat, Tips]
---

Summary
    The following is a post on my experience using the embedded version of `Tomcat 7.0.x`_ to setup
    a Tomcat managed database connection pool accessible by JNDI_. I found out through experimentation that
    the order of method calls influences whether Tomcat reads important configuration files.

Recently I began work on a new project that is being implemented using Java. It will be a servlet application
running on Tomcat 7. One of my goals for the project was to have round trip testing of the application and database
integrated into our local (development workstation) environment. The idea is that it's easier for a single
developer to catch a new bug in feature with local feature tests prior to the code being released to a central
test server.

Asking the developer to manually deploy to a locally installed Tomcat instance was not an option because I wanted
the tests to be as automated as possible--the more automated the tests are the more likely they won't be ignored. To
avoid a Tomcat deployment I set up the feature tests to use the embedded Tomcat API which underwent some simplification
and clean up for version 7. Unfortunately it also appears that some of the changes caught people off guard and documentation
for the API hasn't caught up to its usage. Aside from the lack of documentation though the most frustrating thing about trying
to get the application stack working was the following error:

::

    SQLException: Cannot create JDBC driver of class '' for connect URL 'null'

Searching for "embedded tomcat JDBC" and the exception above will return a number of responses some of which were helpful,
some of which were outdated (for Tomcat 6 APIs vs. Tomcat 7 APIs), and some of which were dead ends.

Here is what I have found: **If** the following are given:

- Using embedded Tomcat
- Have a context.xml file
- Have a web.xml file
- Are using the addWebApp_ method of the embedding API

Then the above exception is *essentially* saying that embedded Tomcat couldn't read the context.xml file. The other symptom
of Tomcat not being able to read a given context.xml file is that the JDBC_ driver it is attempting to use is **not** the one
defined by resource definition in context.xml. To hopefully help other developers along their way the rest of this post is an
example set of files that should provide a working embedded Tomcat 7.0.x configuration with a Tomcat managed database connection
pool accessible by JNDI.

context.xml:

.. sourcecode:: xml

    <?xml version="1.0" encoding="UTF-8"?>
    <Context antiJARLocking="true" path="/ApplicationPath">
        <Resource name="jdbc/resourcename" auth="Container" type="javax.sql.DataSource"
            maxActive="100" maxIdle="30" maxWait="5000"
            username="your_db_user" password="your_db_password" driverClassName="com.your.jdbc.driver"
            factory="org.apache.tomcat.jdbc.pool.DataSourceFactory"
            url="jdbc:/your/jdbc/connection/url" />
    </Context>


web.xml:

.. sourcecode:: xml

    <?xml version="1.0" encoding="ISO-8859-1"?>
    <web-app xmlns="http://java.sun.com/xml/ns/javaee"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
      version="3.0">
    <!-- other web.xml content here -->
        <resource-ref>
            <description>DB connection</description>
            <res-ref-name>jdbc/resourcename</res-ref-name>
            <res-type>javax.sql.DataSource</res-type>
            <res-auth>Container</res-auth>
        </resource-ref>
    </web-app>

The context.xml file defines the parameters necessary to connect to the database. Certain elements of the context.xml
content like the url will depend on the specific JDBC driver in use, but the above should give an idea of the general
structure of a resource definition. For more information on setting up web.xml and context.xml for accessing databases
via Tomcat and JNDI see this `Tomcat 7.0.x guide`_.

.. sourcecode:: java

    package com.mihughes;

    import java.io.File;
    import java.io.IOException;
    import java.net.MalformedURLException;
    import org.apache.catalina.Context;
    import org.apache.catalina.LifecycleException;
    import org.apache.catalina.startup.Tomcat;
    import org.apache.commons.io.FileUtils;

    public class EmbeddedTomcat {
        private Tomcat tomcat;

        public void start() {
            this.tomcat = new Tomcat();
            String baseDir = ".";
            tomcat.setBaseDir(baseDir);
            tomcat.getHost().setAppBase(baseDir);
            tomcat.getHost().setDeployOnStartup(true);
            tomcat.getHost().setAutoDeploy(true);
            //very important without this JNDI will not work
            tomcat.enableNaming(); 
        }

        public void stop() throws LifecycleException
                ,IOException {
            tomcat.stop();
            tomcat.destroy();
            // Tomcat creates a work folder where the temporary files are stored
            FileUtils.deleteDirectory(new File("work"));
            FileUtils.deleteDirectory(new File("tomcat.8080"));
        }

        public void deploy(String appName) throws MalformedURLException
                ,ServletException
                ,LifecycleException {
            //You _must_ get Catalina context file and call setConfigFile with the URI
            //identifying your context.xml file
            Context ctx = tomcat.addWebapp("/GlossaryService", "build/web");
            File configFile = new File("build/web/META-INF/context.xml");
            ctx.setConfigFile(configFile.toURI().toURL());
            //Tomcat can only be started _after_ the setConfigFile is called
            tomcat.start();
        }

        public String getApplicationUrl(String appName) {
            return String.format("http://%s:%d/%s", tomcat.getHost().getName(),
                tomcat.getConnector().getLocalPort(), appName);
        }

        public boolean isRunning() {
            return tomcat != null;
        }
    }

The above can be used as a starter file for embedding Tomcat in an application. I have commented
the three *most* important components of file and where it differs from other embedded Tomcat 7.0.x
examples on the web:

1. ``enableNaming()`` must be called on the Tomcat object--otherwise JNDI will not work at all.
2. ``setConfigFile()`` must be called with a **URI** to the context.xml file--this is something that changed
   between Tomcat 6 and 7, setConfigFile() used to be called with a ``java.lang.String``.
3. ``tomcat.start()`` should **not** be called until all configuration is set. In another online example
   tomcat.start() is called in the start() method of the EmbeddedTomcat object--this was the most frustrating
   thing to figure out. Tomcat will **not** read the contents of context.xml if it is set after start() is called.

I hope my experiences help other developers get started quicker with embedded Tomcat than I was able to.

.. _Tomcat 7.0.x: http://tomcat.apache.org/tomcat-7.0-doc/index.html
.. _JNDI: http://en.wikipedia.org/wiki/Java_Naming_and_Directory_Interface
.. _addWebApp: http://tomcat.apache.org/tomcat-7.0-doc/api/org/apache/catalina/startup/Tomcat.html#addWebapp%28java.lang.String,%20java.lang.String%29
.. _JDBC: http://en.wikipedia.org/wiki/Java_Database_Connectivity
.. _Tomcat 7.0.x guide: http://tomcat.apache.org/tomcat-7.0-doc/jndi-datasource-examples-howto.html
