---
author: Michael Hughes
title: "MySQL: A poor man's RDBMS"
date: 14.10.2012
slug: mysql_a_poor_mans_rdbms
tags: [Rants, Database]
---

Summary
    This is a rant about MySQL_. My (limited) database background is in using MS SQLServer_
    professionally and PostgreSQL_ on my own time. Coming from SQLServer and PostgreSQL to MySQL
    (for a professional project) has been...disappointing.

----

Recently I started a new a project that involved the use of MySQL. Normally at
this point I would talk about the relative popularity of MySQL and add some links
to quantify *how* popular MySQL is--I'm not going to though because I wasn't able to find a good
resource. I'll leave it at this, I think MySQL is popular and it seems to have
a strong following.

The above said, if MySQL is popular as a RDBMS, I failed to see why: (Begin rant)

- Error handling in stored procedures. This seems like it should be a basic feature--a procedure
  stored and run in a database system should have a way to catch errors encountered and **report
  about them.** In T-SQL, Microsoft has provided a familiar Try-Catch construct for
  error handling and reporting error status. In PostgreSQL we get BEGIN-EXCEPTION-END blocks
  that can handle errors and report where they occurred. In MySQL we get...exception handlers that
  have an unfamiliar syntax and provide **no** way of reporting where an error actually occurred in
  the procedure.

  Why is it that exception handlers wrap the statements they handle in every programming language I
  have ever used, T-SQL, and pgSQL, but **not MySQL**? The syntax issue is one thing, but then
  MySQL also doesn't support getting the status code and message in SQLException/SQLWarning
  handlers. The client application of a MySQL database can get the status code and message, but the
  stored procedure running in the database system cannot. Speaking of syntax oddities...
- In the SQL standard, T-SQL, and pgSQL an entity name can be double quoted (") to enable case
  sensitivity or to avoid conflict with a keyword. In MySQL the grave accent (`) should be used to
  do the same. Now I am aware that MySQL has an "ANSI SQL Compliance" option that allows a user to
  using double quotes instead of the grave accent, this totally beside the point. Why does the
  **default** syntax enforce a non-standards compliant, non-portable format? Why?
- Materialized views--they don't exist. Enough said.
- Full text search is only half supported--it's only supported by the MyISAM Engine and not
  InnoDB. To be clear on this point: MyISAM is not an option since it's not actually an `ACID compliant`_
  data store and doesn't support foreign keys.
- Outer Joins? SQLServer and PostgreSQL have them. MySQL? Nope.
- MySQL has bad documentation. Documentation quality is a subjective point, but it's also the
  one that annoys me the most. Comparing the following pages on creating tables for `T-SQL syntax`_
  `pgSQL syntax`_, and `MySQL syntax`_. Now assume that you have zero knowledge of SQL syntax and need
  to create a simple table quickly, which one of the prior links is the hardest to use?

  In the MySQL documentation world apparently section headers are optional and it is standard to include
  extraneous detail on operations not related to the primary subject. The biggest documentation problem
  though is that both the pgSQL and T-SQL pages devote roughly a 1/3 of their content to examples and MySQL's
  page devotes...very little(?)--I'm not sure because of the lack of section headers it's hard to
  actually find anything (see the problem here?)

(End rant)

Now with my short rant done, does MySQL work as part of a larger solution to the solve the client's
problem? Yes it does, MySQL is a fine, upstanding RDBMS and has many fine features on its own
(data replication being one of them.) I will even give that some of the above items, like outer joins
are generally only used in special situations, but that doesn't change that I feel like MySQL
is just the tiniest bit inferior to other options.

.. _MySQL: http://dev.mysql.com/
.. _SQLServer: http://www.microsoft.com/sqlserver/en/us/default.aspx
.. _PostgreSQL: http://www.postgresql.org/
.. _ACID compliant: http://en.wikipedia.org/wiki/ACID
.. _T-SQL syntax: http://msdn.microsoft.com/en-us/library/ms174979.aspx
.. _pgSQL syntax: http://www.postgresql.org/docs/9.2/static/sql-createtable.html
.. _MySQL syntax: http://dev.mysql.com/doc/refman/5.5/en/create-table.html
